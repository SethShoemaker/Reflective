// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reflective.Infrastructure.Persistence;

#nullable disable

namespace Reflective.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230625203810_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Reflective.Domain.Entities.ActivityAggregate.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("TrackingPeriodEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("TrackingPeriodStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Reflective.Domain.Entities.ActivityAggregate.ActivityPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityPlans");
                });

            modelBuilder.Entity("Reflective.Domain.Entities.ActivityAggregate.ActivityPlanVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityPlanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityPlanId");

                    b.ToTable("ActivityPlanVersion");
                });

            modelBuilder.Entity("Reflective.Domain.Entities.ActivityAggregate.ActivitySession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivitySession");
                });

            modelBuilder.Entity("Reflective.Domain.Entities.ActivityAggregate.ActivityPlan", b =>
                {
                    b.HasOne("Reflective.Domain.Entities.ActivityAggregate.Activity", "Activity")
                        .WithMany("ActivityPlans")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Reflective.Domain.Entities.ActivityAggregate.ActivityPlanVersion", b =>
                {
                    b.HasOne("Reflective.Domain.Entities.ActivityAggregate.ActivityPlan", "ActivityPlan")
                        .WithMany("Versions")
                        .HasForeignKey("ActivityPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityPlan");
                });

            modelBuilder.Entity("Reflective.Domain.Entities.ActivityAggregate.ActivitySession", b =>
                {
                    b.HasOne("Reflective.Domain.Entities.ActivityAggregate.Activity", "Activity")
                        .WithMany("Sessions")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Reflective.Domain.Entities.ActivityAggregate.Activity", b =>
                {
                    b.Navigation("ActivityPlans");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Reflective.Domain.Entities.ActivityAggregate.ActivityPlan", b =>
                {
                    b.Navigation("Versions");
                });
#pragma warning restore 612, 618
        }
    }
}
